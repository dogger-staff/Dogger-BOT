// ==UserScript==
// @name         KKTIX 原始檔
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  自動化票務預訂工具，支持自定義URL、日期選擇和自動填充驗證碼
// @match        https://kktix.com/*
// @match        https://*.kktix.cc/*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function() {
    'use strict';

    let isRunning = GM_getValue('isRunning', false);
    let ticketKeywords = GM_getValue('ticketKeywords', '').split(',').map(keyword => keyword.trim());
    let ticketQuantity = GM_getValue('ticketQuantity', 1);
    let guiCreated = false;
    let executionInterval;
    let toggleButton;
    let controlPanel;

    function executeSteps() {
        if (!isRunning) return;

        let allStepsCompleted = true;

        // 步驟1: 查找票種並設置數量
        const ticketUnits = document.querySelectorAll('.ticket-unit');
        let ticketFound = false;
        for (let keyword of ticketKeywords) {
            for (let unit of ticketUnits) {
                const ticketPrice = unit.querySelector('span[ng-if="ticket.price.cents > 0"]');
                if (ticketPrice && ticketPrice.textContent.toLowerCase().includes(keyword.toLowerCase())) {
                    const quantityInput = unit.querySelector('input[ng-model="ticketModel.quantity"]');
                    if (quantityInput) {
                        quantityInput.value = ticketQuantity.toString();
                        quantityInput.dispatchEvent(new Event('input', { bubbles: true }));
                        ticketFound = true;
                        break;
                    }
                }
            }
            if (ticketFound) break;
        }
        if (!ticketFound) allStepsCompleted = false;

        // 步驟2: 勾選同意條款
        const agreeCheckbox = document.getElementById('person_agree_terms');
        if (agreeCheckbox && !agreeCheckbox.checked) {
            agreeCheckbox.click();
        } else if (!agreeCheckbox) {
            allStepsCompleted = false;
        }

        // 步驟3: 點擊下一步按鈕
        const nextButton = document.querySelector('button.btn-primary[ng-click="challenge()"]');
        if (nextButton && !nextButton.disabled) {
            nextButton.click();
        } else if (!nextButton || nextButton.disabled) {
            allStepsCompleted = false;
        }

    }

    function toggleExecution() {
        isRunning = !isRunning;
        GM_setValue('isRunning', isRunning);
        if (isRunning) {
            executeSteps();
            executionInterval = setInterval(executeSteps, 1000); // 每秒檢查一次
            toggleButton.textContent = '停止';
            toggleButton.style.backgroundColor = '#ff4d4d';
        } else {
            clearInterval(executionInterval);
            toggleButton.textContent = '開始';
            toggleButton.style.backgroundColor = '#4CAF50';
        }
    }

    // 創建控制面板
    function createGUI() {
        if (guiCreated) return;

        controlPanel = document.createElement('div');
        controlPanel.style.position = 'fixed';
        controlPanel.style.top = '10px';
        controlPanel.style.right = '10px';
        controlPanel.style.zIndex = '9999';
        controlPanel.style.backgroundColor = 'white';
        controlPanel.style.padding = '10px';
        controlPanel.style.border = '1px solid #4CAF50';
        controlPanel.style.borderRadius = '5px';
        controlPanel.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
        controlPanel.style.fontFamily = 'Arial, sans-serif';
        controlPanel.style.fontSize = '16px';
        controlPanel.style.width = '220px';
        controlPanel.style.cursor = 'move';

        const title = document.createElement('div');
        title.textContent = 'KKTIX助手';
        title.style.color = '#4CAF50';
        title.style.fontWeight = 'bold';
        title.style.marginBottom = '5px';
        title.style.fontSize = '20px';
        controlPanel.appendChild(title);

        const timeDisplay = document.createElement('div');
        timeDisplay.style.fontSize = '14px';
        timeDisplay.style.marginBottom = '10px';
        controlPanel.appendChild(timeDisplay);

        function updateTime() {
            const now = new Date();
            const options = { timeZone: 'Asia/Taipei', hour12: false };
            timeDisplay.textContent = now.toLocaleString('zh-TW', options);
        }
        updateTime();
        setInterval(updateTime, 1000);

        const keywordLabel = document.createElement('label');
        keywordLabel.textContent = '票種關鍵字：';
        keywordLabel.style.display = 'block';
        keywordLabel.style.marginBottom = '5px';
        controlPanel.appendChild(keywordLabel);

        const keywordInput = document.createElement('input');
        keywordInput.type = 'text';
        keywordInput.value = ticketKeywords.join(', ');
        keywordInput.style.width = '100%';
        keywordInput.style.padding = '4px';
        keywordInput.style.marginBottom = '10px';
        keywordInput.style.border = '1px solid #ddd';
        keywordInput.style.borderRadius = '3px';
        keywordInput.style.fontSize = '16px';
        keywordInput.oninput = (e) => {
            ticketKeywords = e.target.value.split(',').map(keyword => keyword.trim());
            GM_setValue('ticketKeywords', ticketKeywords.join(','));
        };
        controlPanel.appendChild(keywordInput);

        const quantityLabel = document.createElement('label');
        quantityLabel.textContent = '票數：';
        quantityLabel.style.display = 'block';
        quantityLabel.style.marginBottom = '5px';
        controlPanel.appendChild(quantityLabel);

        const quantityInput = document.createElement('input');
        quantityInput.type = 'number';
        quantityInput.min = '1';
        quantityInput.value = ticketQuantity;
        quantityInput.style.width = '100%';
        quantityInput.style.padding = '4px';
        quantityInput.style.marginBottom = '10px';
        quantityInput.style.border = '1px solid #ddd';
        quantityInput.style.borderRadius = '3px';
        quantityInput.style.fontSize = '16px';
        quantityInput.oninput = (e) => {
            ticketQuantity = parseInt(e.target.value) || 1;
            GM_setValue('ticketQuantity', ticketQuantity);
        };
        controlPanel.appendChild(quantityInput);

        toggleButton = document.createElement('button');
        toggleButton.textContent = isRunning ? '停止' : '開始';
        toggleButton.style.width = '100%';
        toggleButton.style.padding = '8px';
        toggleButton.style.border = 'none';
        toggleButton.style.borderRadius = '3px';
        toggleButton.style.color = 'white';
        toggleButton.style.fontWeight = 'bold';
        toggleButton.style.cursor = 'pointer';
        toggleButton.style.backgroundColor = isRunning ? '#ff4d4d' : '#4CAF50';
        toggleButton.style.fontSize = '18px';
        toggleButton.onclick = toggleExecution;
        controlPanel.appendChild(toggleButton);

        document.body.appendChild(controlPanel);

        // 添加拖動功能
        let isDragging = false;
        let startX, startY, startLeft, startTop;

        controlPanel.addEventListener('mousedown', function(e) {
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            startLeft = parseInt(window.getComputedStyle(controlPanel).left);
            startTop = parseInt(window.getComputedStyle(controlPanel).top);
        });

        document.addEventListener('mousemove', function(e) {
            if (!isDragging) return;
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            controlPanel.style.left = (startLeft + dx) + 'px';
            controlPanel.style.top = (startTop + dy) + 'px';
        });

        document.addEventListener('mouseup', function() {
            isDragging = false;
        });

        guiCreated = true;
    }

    // 在頁面加載完成後創建GUI
    window.addEventListener('load', createGUI);

    // 在頁面URL變化時重新創建GUI並執行步驟
    let lastUrl = location.href;
    new MutationObserver(() => {
        const url = location.href;
        if (url !== lastUrl) {
            lastUrl = url;
            createGUI();
            if (isRunning) {
                executeSteps();
            }
        }
    }).observe(document, {subtree: true, childList: true});

})();